#!/bin/bash

# SAPCorp_enable_google_auto_updates_for_all_users.sh, 0.1.0
# (c) 2017, SAP SE (Rich Trouton <rich.trouton@sap.com>)
# This script installs and configures Google Software Update
# to automatically update Google Chrome.

# Original script by Hannes Juutilainen
# https://github.com/hjuutilainen/adminscripts/blob/master/chrome-enable-autoupdates.py

# Blog post by Hannes explaining the method used:
# https://obsoletesysadmin.wordpress.com/2012/10/11/working-with-google-chromes-automatic-updates/

chrome_path="$3/Applications/Google Chrome.app"
info_plist_path="$chrome_path"/Contents/Info.plist
brand_path="/Library/Google/Google Chrome Brand.plist"
brand_key="KSBrandID"
tag_path="$info_plist_path"
tag_key="KSChannelID"
version_path="$info_plist_path"
version_key="KSVersion"

ERROR=0

# Check first to verify that Chrome is installed

if [[ -d "$chrome_path" ]]; then
  echo "Google Chrome is installed in /Applications"
else
  ERROR=1
  echo "Google Chrome not installed in /Applications."
fi

# Get Chrome version

if [[ -f "$info_plist_path" ]]; then
   chrome_version=$(defaults read "$info_plist_path" CFBundleShortVersionString)
   echo "Google Chrome version information found: $chrome_version"
else
  ERROR=1
  echo "Google Chrome version information not found."
fi

# Get Chrome update URL

if [[ -f "$info_plist_path" ]]; then
   chrome_update_url=$(defaults read "$info_plist_path" KSUpdateURL)
   echo "Google Chrome update URL found: $chrome_update_url"
else
  ERROR=1
  echo "Google Chrome update URL not found"
fi

# Get Chrome product ID

if [[ -f "$info_plist_path" ]]; then
   chrome_product_id=$(defaults read "$info_plist_path" KSProductID)
   echo "Google Chrome product ID found: $chrome_product_id"
else
  ERROR=1
  echo "Google Chrome product ID not found"
fi

# Get Keystone registration framework path

if  [[ -d "$chrome_path"/Contents/Versions/"$chrome_version"/"Google Chrome Framework.framework"/Frameworks/KeystoneRegistration.framework ]]; then
    keystone_registration="$chrome_path"/Contents/Versions/"$chrome_version"/"Google Chrome Framework.framework"/Frameworks/KeystoneRegistration.framework
    echo "Keystone registration framework path found: $keystone_registration"
else
  ERROR=1
  echo "Keystone registration framework path not found"
fi

# Get the current Keystone install script

if [[ -f "$keystone_registration"/Resources/ksinstall ]]; then
    keystone_install_script="$keystone_registration"/Resources/ksinstall
    echo "Keystone install script found: $keystone_install_script"
elif [[ ! -f "$keystone_registration"/Resources/ksinstall ]] && [[ -f "$keystone_registration"/Resources/install.py ]]; then
    keystone_install_script="$keystone_registration"/Resources/install.py
    echo "Keystone install script found: $keystone_install_script"
else
  ERROR=1
  echo "Keystone install script not found"
fi

# Get the current Keystone payload

if [[ -f "$keystone_registration"/Resources/Keystone.tbz ]]; then
    keystone_payload="$keystone_registration"/Resources/Keystone.tbz
    echo "Keystone payload found: $keystone_payload"
else
  ERROR=1
  echo "Keystone payload not found"
fi

# Install the current Keystone

if [[ -x "$keystone_install_script" ]] && [[ -f "$keystone_payload" ]]; then
   echo "$keystone_install_script and $keystone_payload are available. Installing Keystone."
   "$keystone_install_script" --install "$keystone_payload" --force

   if [[ $? -eq 0 ]]; then
      echo "Keystone installed successfully."
   else
      echo "Error: Keystone failed to install successfully."
      ERROR=1
    fi
fi

# Register Chrome with Keystone

ksadmin="/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/MacOS/ksadmin"

if [[ -x "$ksadmin" ]]; then
    echo "Keystone ksadmin tool found: $ksadmin"
    "$ksadmin" --register --productid "$chrome_product_id" --version "$chrome_version" --xcpath "$chrome_path" --url "$chrome_update_url" --tag-path "$tag_path" --tag-key "$tag_key" --brand-path "$brand_path" --brand-key "$brand_key" --version-path "$version_path" --version-key "$version_key"
       if [[ $? -eq 0 ]]; then
          echo "Chrome successfully registered with Keystone."
       else
          echo "Error: Chrome failed to register successfully with Keystone."
          ERROR=1
      fi
else
  ERROR=1
  echo "Keystone ksadmin tool not found"
fi

exit "$ERROR"